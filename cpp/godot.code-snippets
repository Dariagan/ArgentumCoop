{
    "if": {
        "scope": "c,cpp",
        "prefix": "if",
        "body": [
            "if($1)\n{\n\t$2\n}"
        ],
        "description": "if"
    },
    "elif": {
        "scope": "c,cpp",
        "prefix": "elif",
        "body": [
            "else if($1)\n{\n\t$2\n}"
        ],
        "description": "elif"
    },
    "else": {
        "scope": "c,cpp",
        "prefix": "else",
        "body": [
            "els${2|e,e if()|}\n{\n\t$1\n}"
        ],
        "description": "else"
    },
    "if-else": {
        "scope": "c,cpp",
        "prefix": "ifel",
        "body": [
            "if(${1:CONDITION})\n{\n\t$2\n}\nels${4|e,e if()|}\n{\n\t$3\n}"
        ],
        "description": "if-else"
    },
    "if-else if": {
        "scope": "c,cpp",
        "prefix": "ifelif",
        "body": [
            "if(${1:CONDITION})\n{\n\t$2\n}\nelse if(${2:CONDITION})\n{\n\t$4\n}"
        ],
        "description": "if-elseif"
    },
    "if-else if-else": {
        "scope": "c,cpp",
        "prefix": "ifelifel",
        "body": [
            "if(${1:CONDITION})\n{\n\t$2\n}\nelse if(${3:CONDITION})\n{\n\t$4\n}\nelse\n{\n\t$5\n}"
        ],
        "description": "if-elseif-else"
    },
    "Print to godot console": {
        "scope": "cpp",
        "prefix": "gp",
        "body": [
            "UtilityFunctions::print(${1:SOMETHING});"
        ],
        "description": "Print to godot console"
        },
    
        "Printerr to godot console": {
        "scope": "cpp",
        "prefix": "gpe",
        "body": [
            "UtilityFunctions::printerr(\"${1:SOMETHING}\");"
        ],
        "description": "Printerr to godot console"
    },
    "for": {
        "scope": "cpp",
        "prefix": "for",
        "body": [
            "for(int ${3|i,j|} = 0; ${3|i,j|} < $1; ${3|i,j|}++)\n{\n\t$2\n}"
        ],
        "description": "for loop"
    },
    "foreach": {
        "scope": "cpp",
        "prefix": "fore",
        "body": [
            "for(const auto& ${2:elem}: $1)\n{\n\t$3\n}"
        ],
        "description": "for-each loop"
    },
    "format": {
        "scope": "cpp",
        "prefix": "format",
        "body": [
            "for(int i = 0; i < ${1:MATRIX}.size(); i++)\nfor(int j = 0; j < ${1:MATRIX}[0].size(); j++)\n{\n\tconst SafeVec coords(i, j);\n\t$2\n}"
        ],
        "description": "matrix for loop"
    },
    
    "Import prints": {
        "scope": "cpp",
        "prefix": "igp",
        "body": [
            "#include <godot_cpp/variant/utility_functions.hpp>"
        ],
        "description": "Import printing functions to godot engine"
    },
    "bind method": {
        "scope": "cpp",
        "prefix": "bmet",
        "body": [
            "ClassDB::bind_method(D_METHOD(\"${2:METHOD_NAME}\"), &${1:CLASS_NAME}::${2:METHOD_NAME});"
        ],
        "description": "Bind a method to the Godot engine"
    },
    "bind property": {
        "scope": "cpp",
        "prefix": "bprop",
        "body": [
            "ADD_PROPERTY(PropertyInfo(Variant::${1|INT,ARRAY,STRING,VECTOR2,VECTOR2I,BOOL,RECT2,DICTIONARY,FLOAT,SIGNAL,CALLABLE,VECTOR3,VECTOR4,COLOR|}, \"$2\"), \"set_$2\", \"get_$2\");"
        ],
        "description": "Bind a property to the Godot engine"
    },
    "bind signal": {
        "scope": "cpp",
        "prefix": "bsig",
        "body": [
            "ADD_SIGNAL(MethodInfo(\"${1:REPLACE_ME}\"));"
        ],
        "description": "Bind a signal to the Godot engine"
    },
    "const auto&": {
        "scope": "cpp",
        "prefix": "caut",
        "body": [
            "const ${2:auto}& ${1:__NAME__} "
        ],
        "description": "const auto& "
    },
    "std::vector": {
        "scope": "cpp",
        "prefix": "vector",
        "body": [
            "std::vector<${1:__TYPE__}> ${2:__NAME__};"
        ],
        "description": "std::vector"
    },
    "std::unordered_set": {
        "scope": "cpp",
        "prefix": "uset",
        "body": [
            "std::unordered_set<${1:__TYPE__}> ${2:__NAME__};"
        ],
        "description": "std::unordered_set"
    },
    "std::unordered_map": {
        "scope": "cpp",
        "prefix": "umap",
        "body": [
            "std::unordered_map<${1:_KEY_TYPE_}, ${2:_VALUE_TYPE_}> ${3:__NAME__};"
        ],
        "description": "std::unordered_map"
    },
    "std::optional": {
        "scope": "cpp",
        "prefix": "opt",
        "body": [
            "std::optional<${1:__TYPE__}> ${2:__NAME__};"
        ],
        "description": "std::optional"
    },
    
    "#inclib": {
        "scope": "c,cpp",
        "prefix": "inclib",
        "body": [
            "#include <${1:__NAME__}>"
        ],
        "description": "include a library"
    },
    "#incloc": {
        "scope": "cpp",
        "prefix": "incloc",
        "body": [
            "#include \"${1:__NAME__}${2|.h,.cpp|}\""
        ],
        "description": "include local file"
    },
    "#ifndef": {
        "scope": "cpp",
        "prefix": "ifndef",
        "body": [
            "#ifndef argcpp_$1_H\n#define argcpp_$1_H__\n\n#endif //argcpp_$1_H__"
        ],
        "description": "header guard"
    },
    "class function":{
        "scope": "rust",
        "prefix": ["fn","method","func","pub"],
        "body": [
        "${1|pub fn,fn,#[func]\nfn,#[func]\npub fn|} $2(${3|&mut self),&self),)|} ${4|->  {,{|}\n    $0\n}" 
        ],
    },
    "new":{
        "scope": "rust",
        "prefix": ["new"],
        "body": [
        "pub fn new() -> Self {",
        "\t$0",
        "}" 
        ],
    },
    "var":{
        "scope": "rust",
        "prefix": "var",
        "body": [
        "#[var${1|],(get = get_\\, set = set_)]|}"
        ],
    },
    "getset":{
        "scope": "rust",
        "prefix": "getset",
        "body": [
        "#[var(get = get_$1, set = set_$1)]"
        ],
    },
    "export":{
        "scope": "rust",
        "prefix": "export",
        "body": [
        "#[export]"
        ],
    },
    "godot class":{
        "scope": "rust",
        "prefix": "class",
        "body": [
            "use godot::{register::godot_api, register::GodotClass, obj::Base};",
            "#[derive(GodotClass)]",
            "#[class(${1|b,init\\, b|}ase=${3:Node2D})]",
            "struct ${2:MyClass}{",
            "    base: Base<$3>,",
            "    #[var] ${5:foo_bar}: i64,",
            "}\n",
            "#[godot_api]",
            "impl I$3 for $2 {",
            "\tfn init(base: Base<$3>) -> Self {",
            "\t\tSelf {base, foo_bar: 32}",
            "\t}",
            "}\n",
            "#[godot_api]",
            "impl $2 {",
            "\t",
            "}\n",
        ],
    },
    "godot enum":{
        "scope": "rust",
        "prefix": ["genum","enum", "godotenum"],
        "body": [
        "${2|#[derive(GodotConvert\\, Var\\, Export)]\n#[godot(via = i32)]\np,\np|}ub enum ${1:MyEnum} {",
        "\tFirst = 0,",
        "\tSecond,",
        "\tThird,",
        "\tFourth,",
        "}",
        ],
    },
    "godot print":{
        "scope": "rust",
        "prefix": ["gprint", "gdprint", "godot_print", "gp"],
        "body": [
        "godot_print!(\"{}\", $0);",
        ],
    },
    "godot resource":{
        "scope": "rust",
        "prefix": "resource",
        "body": [
            "use godot::{builtin::*, engine::{IResource, Resource}, obj::{Base, Gd}, register::{godot_api, Export, GodotClass, GodotConvert, Var}};",
            "#[derive(GodotClass)]",
            "#[class(tool, base=Resource)]",
            "pub struct ${1:MyResource} {",
            "\tbase: Base<Resource>,",
            "\t#[var] id: StringName,",
            "\t#[export] name: GString,", 
            "\t#[export] ${2:attribute}: i64,",
            "}",
            "#[godot_api]",
            "impl IResource for $1 {",
            "\tfn init(base: Base<Resource>) -> Self {",
            "\t\tSelf {base,",
            "\t\t\tid: \"\".into(), name: \"\".into(), ${2:attribute}: 100}",
            "\t}",
            "}",
            "#[godot_api] #[allow(dead_code)]",
            "impl $1 {",
            "\tpub fn base(&self) -> &Base<Resource> { &self.base }",
            "\tpub fn id(&self) -> &StringName { &self.id }",
            "}",
            "use std::hash::{Hash, Hasher};",
            "impl Hash for $1 {",
            "\tfn hash<H: Hasher>(&self, state: &mut H) {",
            "\t\tstate.write_u32(self.id.hash());",
            "\t\tself.$2.hash(state);",
            "\t}",
            "}",
        ],
    },
    "godot::prelude::*;":{
        "scope": "rust",
        "prefix": "prelude",
        "body": [
        "use godot::prelude::*;",
        ],
    },
    }
    